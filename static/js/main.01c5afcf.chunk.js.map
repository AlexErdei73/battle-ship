{"version":3,"sources":["icons/battleship.svg","icons/hit.png","icons/sunk.jpg","icons/missed.png","components/boardcell.jsx","components/board.jsx","components/titlebar.jsx","helper.js","player.js","ship.js","gameboard.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["BoardCell","props","picture","pictureSize","pictureStyle","position","left","bottom","height","style","classNames","content","pos","battleShip","backgroundColor","borderColor","sunk","hit","missed","hide","className","id","onClick","onPointerDown","onPointerMove","onPointerUp","onDoubleClick","disabled","alt","src","width","Board","cells","i","push","onMouseLeave","map","areBoardCellsHidden","TitleBar","isTitleInView","text","playerScore","computerScore","findIndex","array","element","x","y","randomPosition","Math","floor","random","getIndex","getPosition","index","getBoard","board","showShips","gameboard","missedShots","forEach","ships","ship","isSunk","getCoordinates","getDamages","getState","game","playerBoard","player","enemyBoard","computer","start","placeShips","direction","placeShipsRandom","initialBoardCellsHidden","animateBoardCells","target","indexOf","getShipIndex","positions","addPositions","pos1","pos2","result","deleteShip","shipIndex","splice","changeShipLengths","Player","this","name","enemy","attack","shot","success","receiveAttack","autoAttack","positionFn","attackResult","Ship","dir","len","_position","_direction","_length","_coordinates","_damages","indexOfDamage","_setUpCoordinates","vector","dx","dy","_directionVector","newPosition","length","Object","assign","Gameboard","_shipLengths","_isPieceOnGameboard","_minimum","reduce","min","number","_distance","ship1","ship2","distances","distanceSquares","sqrt","_distanceFromPiece","placeShip","shipLength","isShipOnGameboard","_isShipOnGameboard","isDistanceSafe","_minimumDistance","shotPosition","isAllShipSunk","deletedLength","Game","setState","playerAttack","gameOver","winner","oldPosition","translation","initialState","gameResult","title","animationTarget","buttonNewGameActive","shipToMove","isUserDraging","App","useState","state","scores","setScores","setTitleInView","isGameStarted","setGameStarted","handleOnMouseUp","event","setAreBoardCellsHidden","animateBoard","setTimeout","newBoardCellsHidden","useEffect","toUpperCase","Number","currentTarget","coordinates","document","elementFromPoint","clientX","clientY","minus","newState","translated","oldDirection","newDirection","newScores","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01c5afcf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/battleship.fe5c943a.svg\";","export default __webpack_public_path__ + \"static/media/hit.c844d5aa.png\";","export default __webpack_public_path__ + \"static/media/sunk.ba66429c.jpg\";","export default __webpack_public_path__ + \"static/media/missed.89c6a26f.png\";","import battleShip from \"../icons/battleship.svg\";\nimport hit from \"../icons/hit.png\";\nimport sunk from \"../icons/sunk.jpg\";\nimport missed from \"../icons/missed.png\";\n\nconst BoardCell = (props) => {\n  let picture;\n  let pictureSize = \"27px\";\n  let pictureStyle = {\n    position: \"relative\",\n    left: \"-8px\",\n    bottom: \"0\",\n    height: \"27px\",\n  };\n  const style = {};\n  let classNames = \"boardCell\";\n\n  switch (props.content[props.pos]) {\n    case \"B\":\n      picture = battleShip;\n      style.backgroundColor = \"skyblue\";\n      style.borderColor = \"steelblue\";\n      break;\n    case \"S\":\n      picture = sunk;\n      style.borderColor = \"yellow\";\n      break;\n    case \"X\":\n      picture = hit;\n      style.backgroundColor = \"yellow\";\n      style.borderColor = \"red\";\n      pictureSize = \"12px\";\n      pictureStyle = {};\n      break;\n    case \"/\":\n      picture = missed;\n      break;\n    default:\n      picture = \"#\";\n      pictureStyle = {};\n      pictureSize = \"27px\";\n  }\n  if (props.hide) classNames += \" hide\";\n  else classNames += \" show\";\n\n  return (\n    <button\n      className={classNames}\n      id={props.pos}\n      key={props.pos}\n      onClick={props.onClick}\n      onPointerDown={props.onPointerDown}\n      onPointerMove={props.onPointerMove}\n      onPointerUp={props.onPointerUp}\n      onDoubleClick={props.onDoubleClick}\n      disabled={props.disabled}\n      style={style}\n    >\n      <img alt=\"\" src={picture} width={pictureSize} style={pictureStyle} />\n    </button>\n  );\n};\n\nexport default BoardCell;\n","import BoardCell from \"./boardcell\";\n\nconst Board = (props) => {\n  const cells = [];\n  for (let i = 0; i < 100; i++) {\n    cells.push(i);\n  }\n\n  return (\n    <div className=\"board\" id={props.id} onMouseLeave={props.onMouseLeave}>\n      {cells.map((pos) => {\n        return (\n          <BoardCell\n            pos={pos}\n            key={pos}\n            content={props.content}\n            disabled={props.disabled}\n            onClick={props.onClick}\n            hide={props.areBoardCellsHidden[pos]}\n            onPointerDown={props.onPointerDown}\n            onPointerMove={props.onPointerMove}\n            onPointerUp={props.onPointerUp}\n            onDoubleClick={props.onDoubleClick}\n          ></BoardCell>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","const TitleBar = (props) => {\n  return (\n    <div className=\"titleBar\">\n      <h1 className={props.isTitleInView ? \"center\" : \"\"}>{props.text}</h1>\n      <div className=\"left\">\n        <h1 className=\"playerScore\">{props.playerScore}</h1>\n      </div>\n      <div className=\"right\">\n        <h1 className=\"computerScore\">{props.computerScore}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","export const findIndex = (array, pos) => {\n  return array.findIndex(function (element) {\n    return element.x === pos.x && element.y === pos.y;\n  });\n};\n\nexport function randomPosition() {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  return { x, y };\n}\n\nexport function randomDirection() {\n  return 90 * Math.floor(Math.random() * 4);\n}\n\nexport function getIndex(position) {\n  const x = position.x;\n  const y = position.y;\n  return 10 * (9 - y) + x;\n}\n\nexport function getPosition(index) {\n  const y = 9 - Math.floor(index / 10);\n  const x = index % 10;\n  return { x, y };\n}\n\nfunction getBoard(board, showShips) {\n  const gameboard = [];\n  for (let i = 0; i < 100; i++) {\n    gameboard.push(\" \");\n  }\n  board.missedShots.forEach((position) => {\n    const index = getIndex(position);\n    gameboard[index] = \"/\";\n  });\n  board.ships.forEach((ship) => {\n    if (ship.isSunk()) {\n      ship.getCoordinates().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"S\";\n      });\n    } else {\n      if (showShips) {\n        ship.getCoordinates().forEach((position) => {\n          const index = getIndex(position);\n          gameboard[index] = \"B\";\n        });\n      }\n      ship.getDamages().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"X\";\n      });\n    }\n  });\n  return gameboard;\n}\n\nexport function getState(game) {\n  const playerBoard = getBoard(game.player.board, true);\n  const enemyBoard = getBoard(game.computer.board, false);\n  return { playerBoard, enemyBoard };\n}\n\nexport function start(game) {\n  game.placeShips(game.player.board, [\n    { position: { x: 1, y: 2 }, direction: 90 },\n    { position: { x: 4, y: 4 }, direction: 0 },\n    { position: { x: 4, y: 9 }, direction: 0 },\n    { position: { x: 4, y: 1 }, direction: 0 },\n    { position: { x: 8, y: 7 }, direction: 90 },\n    { position: { x: 5, y: 7 }, direction: 0 },\n    { position: { x: 8, y: 1 }, direction: 0 },\n  ]);\n  game.placeShipsRandom(game.computer.board);\n}\n\n//animation reveiling gameboard\nexport function initialBoardCellsHidden() {\n  const initialBoardCellsHidden = [];\n  for (let i = 0; i < 100; i++) {\n    initialBoardCellsHidden.push(true);\n  }\n  return initialBoardCellsHidden;\n}\n\nexport function animateBoardCells(areBoardCellsHidden, target) {\n  if (areBoardCellsHidden.indexOf(!target) === -1) return areBoardCellsHidden;\n  else {\n    let index;\n    do {\n      index = getIndex(randomPosition());\n    } while (areBoardCellsHidden[index] !== !target);\n    areBoardCellsHidden[index] = target;\n    return areBoardCellsHidden;\n  }\n}\n\n//positioning ships by user\nexport function getShipIndex(board, position) {\n  const ships = board.ships;\n  const indexes = ships.map((ship) => {\n    const positions = ship.getCoordinates();\n    const index = findIndex(positions, position);\n    return index;\n  });\n  const shipIndex = indexes.findIndex((index) => {\n    return index !== -1;\n  });\n  return shipIndex;\n}\n\nexport function addPositions(pos1, pos2) {\n  const result = {};\n  result.x = pos1.x + pos2.x;\n  result.y = pos1.y + pos2.y;\n  return result;\n}\n\nexport function minus(position) {\n  const result = {};\n  result.x = -position.x;\n  result.y = -position.y;\n  return result;\n}\n\nexport function deleteShip(board, shipIndex) {\n  board.ships.splice(shipIndex, 1);\n  board.changeShipLengths(shipIndex);\n}\n","import { findIndex } from \"./helper\";\n\nfunction Player() {\n  this.name = \"\";\n  this.enemy = {};\n  this.board = {};\n\n  const _hasBeenHitEnemyShip = (shot) => {\n    const ships = this.enemy.board.ships;\n    const areShipsHit = ships.map((ship) => {\n      return !(findIndex(ship.getDamages(), shot) === -1);\n    });\n    return areShipsHit.indexOf(true) !== -1;\n  };\n\n  this.attack = (position) => {\n    const missedShots = this.enemy.board.missedShots;\n    let success = false;\n    let hit = false;\n    if (findIndex(missedShots, position) !== -1) return { success, hit };\n    else if (_hasBeenHitEnemyShip(position)) return { success, hit };\n    else {\n      hit = this.enemy.board.receiveAttack(position);\n      success = true;\n      return { success, hit };\n    }\n  };\n\n  this.autoAttack = (positionFn) => {\n    let attackResult = {};\n    do {\n      attackResult = this.attack(positionFn());\n    } while (!attackResult.success);\n    return attackResult;\n  };\n}\n\nexport default Player;\n","import { findIndex } from \"./helper\";\n\nfunction Ship(pos, dir, len) {\n  const _position = pos;\n  let _direction = dir;\n  let _length = len;\n  let _coordinates = [];\n  let _damages = [];\n\n  const _recordDamage = (index) => {\n    _damages.push({ ..._coordinates[index] });\n  };\n\n  this.hit = (position) => {\n    if (findIndex(_damages, position) !== -1) return false;\n    else {\n      const indexOfDamage = findIndex(_coordinates, position);\n      if (indexOfDamage === -1) return false;\n      else {\n        _recordDamage(indexOfDamage);\n        return true;\n      }\n    }\n  };\n\n  const _directionVector = () => {\n    let vector = { dx: 0, dy: 0 };\n    switch (_direction) {\n      case 0:\n        vector = { dx: 1, dy: 0 };\n        break;\n      case 90:\n        vector = { dx: 0, dy: 1 };\n        break;\n      case 180:\n        vector = { dx: -1, dy: 0 };\n        break;\n      case 270:\n        vector = { dx: 0, dy: -1 };\n        break;\n      default:\n    }\n    return vector;\n  };\n\n  const _setUpCoordinates = () => {\n    _coordinates = [];\n    _damages = [];\n    const { dx, dy } = { ..._directionVector() };\n    const newPosition = { ..._position };\n    for (let i = 0; i < _length; i++) {\n      _coordinates.push({ ...newPosition });\n      newPosition.x += dx;\n      newPosition.y += dy;\n    }\n  };\n\n  this.getCoordinates = () => {\n    return [..._coordinates];\n  };\n\n  this.getDamages = () => {\n    return [..._damages];\n  };\n\n  this.isSunk = () => {\n    return _damages.length === _length;\n  };\n\n  Object.assign(this, {\n    get position() {\n      return _position;\n    },\n\n    set position(position) {\n      _position.x = position.x;\n      _position.y = position.y;\n      _setUpCoordinates();\n    },\n\n    get direction() {\n      return _direction;\n    },\n\n    set direction(direction) {\n      _direction = direction;\n      _setUpCoordinates();\n    },\n\n    get length() {\n      return _length;\n    },\n\n    set length(length) {\n      _length = length;\n      _setUpCoordinates();\n    },\n  });\n\n  _setUpCoordinates();\n}\n\nexport default Ship;\n","import { findIndex } from \"./helper\";\nimport Ship from \"./ship\";\n\nfunction Gameboard() {\n  this.ships = [];\n  this.missedShots = [];\n  const _shipLengths = [5, 4, 3, 2, 2, 1, 1];\n\n  const _isPieceOnGameboard = (position) => {\n    const { x, y } = { ...position };\n    return x >= 0 && x < 10 && y >= 0 && y < 10;\n  };\n\n  const _isShipOnGameboard = (ship) => {\n    const arePiecesOnGameboard = ship\n      .getCoordinates()\n      .map((position) => _isPieceOnGameboard(position));\n    return arePiecesOnGameboard.indexOf(false) === -1;\n  };\n\n  const _minimum = (array) => {\n    return array.reduce((min, number) => {\n      if (number < min) return number;\n      else return min;\n    }, array[0]);\n  };\n\n  const _distanceFromPiece = (position, ship) => {\n    const { x, y } = { ...position };\n    const distanceSquares = ship\n      .getCoordinates()\n      .map((pos) => (x - pos.x) ** 2 + (y - pos.y) ** 2);\n    return Math.sqrt(_minimum(distanceSquares));\n  };\n\n  const _distance = (ship1, ship2) => {\n    const distances = ship1\n      .getCoordinates()\n      .map((pos) => _distanceFromPiece(pos, ship2));\n    return _minimum(distances);\n  };\n\n  const _minimumDistance = (ship1, ships) => {\n    const distances = ships.map((ship2) => _distance(ship1, ship2));\n    return _minimum(distances);\n  };\n\n  this.placeShip = (position, direction) => {\n    const shipLength = _shipLengths[this.ships.length];\n    const ship = new Ship(position, direction, shipLength);\n    const isShipOnGameboard = _isShipOnGameboard(ship);\n    const isDistanceSafe =\n      _minimumDistance(ship, this.ships) >= 2 || this.ships.length === 0;\n    const success = isShipOnGameboard && isDistanceSafe;\n    if (success) this.ships.push(ship);\n    return success;\n  };\n\n  const _indexOfShipGotHit = (shotPosition, ships) => {\n    const hits = ships.map((ship) => ship.hit(shotPosition));\n    return hits.indexOf(true);\n  };\n\n  this.receiveAttack = (position) => {\n    if (!_isPieceOnGameboard(position)) return false;\n    else {\n      if (_indexOfShipGotHit(position, this.ships) !== -1) {\n        return true;\n      } else {\n        if (\n          findIndex(this.missedShots, position) === -1 ||\n          this.missedShots.length === 0\n        ) {\n          this.missedShots.push({ ...position });\n        }\n        return false;\n      }\n    }\n  };\n\n  this.isAllShipSunk = () => {\n    const isShipsSunk = this.ships.map((ship) => ship.isSunk());\n    if (isShipsSunk.indexOf(false) === -1) return true;\n    else return false;\n  };\n\n  this.changeShipLengths = (index) => {\n    const deletedLength = _shipLengths.splice(index, 1);\n    _shipLengths.push(deletedLength);\n  };\n}\n\nexport default Gameboard;\n","import Player from \"./player\";\nimport Gameboard from \"./gameboard\";\nimport { randomPosition, randomDirection, getState } from \"./helper\";\n\nfunction Game() {\n  this.player = new Player();\n  this.player.name = \"player\";\n  this.player.board = new Gameboard();\n  this.computer = new Player();\n  this.computer.name = \"computer\";\n  this.computer.board = new Gameboard();\n  this.player.enemy = this.computer;\n  this.computer.enemy = this.player;\n  this.setState = () => {};\n\n  this.placeShips = (board, ships) => {\n    ships.forEach((ship) => {\n      board.placeShip(ship.position, ship.direction);\n    });\n  };\n\n  this.placeShipsRandom = (board) => {\n    for (let i = 0; i < 7; i++) {\n      while (!board.placeShip(randomPosition(), randomDirection()));\n    }\n  };\n\n  this.playerAttack = (position) => {\n    let attackResult = this.player.attack(position);\n    let gameOver = false;\n    let winner = {};\n    if (!attackResult.success) return { gameOver, winner };\n    //update the DOM here\n    this.setState(getState(this));\n    if (attackResult.hit) {\n      gameOver = this.computer.board.isAllShipSunk();\n      if (gameOver) winner = this.player;\n    } else {\n      do {\n        attackResult = this.computer.autoAttack(randomPosition);\n        //update the DOM here\n        this.setState(getState(this));\n        gameOver = this.player.board.isAllShipSunk();\n        if (gameOver) winner = this.computer;\n      } while (attackResult.hit && !gameOver);\n    }\n    return { gameOver, winner };\n  };\n}\n\nexport default Game;\n","import \"./App.css\";\nimport Board from \"./components/board\";\nimport TitleBar from \"./components/titlebar\";\nimport { useState, useEffect } from \"react\";\nimport Game from \"./game\";\nimport {\n  getState,\n  getPosition,\n  getIndex,\n  initialBoardCellsHidden,\n  animateBoardCells,\n  start,\n  getShipIndex,\n  addPositions,\n  minus,\n  deleteShip,\n} from \"./helper\";\n\nlet game = new Game();\nstart(game);\nconst initialState = getState(game);\nlet gameResult = {\n  gameOver: true,\n  winner: \"\",\n};\nlet title = \"BATTLESHIP\";\nlet animationTarget = false;\nlet buttonNewGameActive = true;\nconst shipToMove = {};\nlet oldPosition;\nlet translation;\nlet isUserDraging = false;\n\nfunction App() {\n  const [state, setState] = useState(initialState);\n  const [scores, setScores] = useState({\n    player: 0,\n    computer: 0,\n  });\n  const [isTitleInView, setTitleInView] = useState(false);\n  const [isGameStarted, setGameStarted] = useState(false);\n\n  const onClick = (event) => {\n    const id = event.target.id;\n    if (!id) return;\n    const result = game.playerAttack(getPosition(id));\n    gameResult = { ...result };\n    if (result.gameOver) {\n      const newScores = { ...scores };\n      const winner = result.winner.name;\n      newScores[winner] += 1;\n      setScores(newScores);\n      title = \"GAME OVER\";\n      buttonNewGameActive = true;\n    }\n  };\n\n  const handleClickNewGame = () => {\n    if (isGameStarted) {\n      buttonNewGameActive = false;\n      game = new Game();\n      start(game);\n      gameResult = {\n        gameOver: true,\n        winner: \"\",\n      };\n      animationTarget = true;\n      setTitleInView(false);\n      animateBoard();\n      setTimeout(() => {\n        title = \"BATTLESHIP\";\n        animationTarget = false;\n        setAreBoardCellsHidden(initialBoardCellsHidden());\n        buttonNewGameActive = true;\n        setState(initialState);\n        setTitleInView(true);\n        setGameStarted(false);\n      }, 4000);\n    } else {\n      buttonNewGameActive = false;\n      gameResult.gameOver = false;\n      setGameStarted(true);\n    }\n  };\n\n  const handleOnMouseDown = (event) => {\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    shipToMove.position = { ...ship.position };\n    shipToMove.direction = ship.direction;\n    shipToMove.length = ship.length;\n    shipToMove.coordinates = ship.getCoordinates();\n    oldPosition = { ...position };\n    deleteShip(board, shipIndex);\n    isUserDraging = true;\n  };\n\n  const handleOnMouseUp = (event) => {\n    if (!isUserDraging) return;\n    const board = game.player.board;\n    const newPosition = addPositions(shipToMove.position, translation);\n    const success = board.placeShip(newPosition, shipToMove.direction);\n    if (!success) board.placeShip(shipToMove.position, shipToMove.direction);\n    isUserDraging = false;\n    setState(getState(game));\n  };\n\n  const handleOnMouseMove = (event) => {\n    if (!isUserDraging) return;\n    let position;\n    const element = document.elementFromPoint(event.clientX, event.clientY);\n    if (!element || element.className.indexOf(\"boardCell\") === -1) {\n      position = oldPosition;\n      isUserDraging = false;\n      game.player.board.placeShip(shipToMove.position, shipToMove.direction);\n    } else position = getPosition(Number(element.id));\n    translation = addPositions(position, minus(oldPosition));\n    const newState = getState(game);\n    const board = newState.playerBoard;\n    shipToMove.coordinates.forEach((pos) => {\n      const translated = addPositions(pos, translation);\n      const index = getIndex(translated);\n      if (\n        translated.x >= 0 &&\n        translated.x < 10 &&\n        translated.y >= 0 &&\n        translated.y < 10\n      )\n        board[index] = \"B\";\n    });\n    setState(newState);\n  };\n\n  const handleDoubleClick = (event) => {\n    handleOnMouseUp(event);\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    const oldDirection = ship.direction;\n    const oldPosition = ship.position;\n    const newDirection = (oldDirection + 90) % 360;\n    deleteShip(board, shipIndex);\n    const success = board.placeShip(oldPosition, newDirection);\n    if (!success) board.placeShip(oldPosition, oldDirection);\n    setState(getState(game));\n  };\n\n  game.setState = setState;\n\n  //animation reveiling gameboard\n  const [areBoardCellsHidden, setAreBoardCellsHidden] = useState(\n    initialBoardCellsHidden()\n  );\n\n  const animateBoard = () => {\n    if (areBoardCellsHidden.indexOf(!animationTarget) !== -1) {\n      setTimeout(() => {\n        let newBoardCellsHidden = animateBoardCells(\n          animateBoardCells([...areBoardCellsHidden], animationTarget),\n          animationTarget\n        );\n        setAreBoardCellsHidden(newBoardCellsHidden);\n      }, 50);\n    }\n  };\n\n  useEffect(animateBoard, [areBoardCellsHidden]);\n\n  useEffect(() => {\n    setTitleInView(true);\n  }, []);\n\n  return (\n    <div>\n      <TitleBar\n        isTitleInView={isTitleInView}\n        playerScore={scores.player}\n        computerScore={scores.computer}\n        text={title}\n      />\n      <div className=\"gameArea\">\n        <h1 className=\"winner\">\n          {!gameResult.winner.name\n            ? \"WINNER:\"\n            : `WINNER: ${gameResult.winner.name.toUpperCase()}`}\n        </h1>\n        <div className=\"boardContainer\">\n          <button\n            className=\"gameControl\"\n            onClick={handleClickNewGame}\n            disabled={!buttonNewGameActive}\n          >\n            {isGameStarted ? \"New Game\" : \"Start\"}\n          </button>\n          <Board\n            id=\"player\"\n            content={state.playerBoard}\n            disabled={isGameStarted}\n            areBoardCellsHidden={areBoardCellsHidden}\n            onPointerDown={handleOnMouseDown}\n            onPointerMove={handleOnMouseMove}\n            onPointerUp={handleOnMouseUp}\n            onMouseLeave={handleOnMouseUp}\n            onDoubleClick={handleDoubleClick}\n          />\n        </div>\n        <div className=\"boardContainer\">\n          <button className=\"gameControl\">Reset</button>\n          <Board\n            id=\"computer\"\n            content={state.enemyBoard}\n            disabled={gameResult.gameOver}\n            onClick={onClick}\n            areBoardCellsHidden={areBoardCellsHidden}\n          />\n        </div>\n        <div className=\"info\">\n          <p>\n            You can drag and drop your ships to their place. Use double click to\n            rotate the ships. The program maintains 2 cells distance between the\n            ships and keeps them on the game board.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}