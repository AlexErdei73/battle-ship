{"version":3,"sources":["icons/battleship.svg","icons/hit.png","icons/sunk.jpg","icons/missed.png","components/boardcell.jsx","components/board.jsx","components/titlebar.jsx","helper.js","player.js","ship.js","gameboard.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["BoardCell","props","picture","pictureSize","pictureStyle","position","left","bottom","height","style","classNames","content","pos","battleShip","backgroundColor","borderColor","sunk","hit","missed","hide","className","id","onClick","onPointerDown","onMouseDown","onPointerEnter","onMouseEnter","onPointerUp","onMouseUp","onDoubleClick","disabled","alt","src","width","Board","cells","i","push","onMouseLeave","map","areBoardCellsHidden","TitleBar","isTitleInView","text","playerScore","computerScore","findIndex","array","element","x","y","randomPosition","Math","floor","random","getIndex","getPosition","index","getBoard","board","showShips","gameboard","missedShots","forEach","ships","ship","isSunk","getCoordinates","getDamages","getState","game","playerBoard","player","enemyBoard","computer","start","placeShips","direction","placeShipsRandom","animateBoardCells","target","indexOf","getShipIndex","positions","addPositions","pos1","pos2","result","deleteShip","shipIndex","splice","changeShipLengths","Player","this","name","enemy","attack","shot","success","receiveAttack","autoAttack","positionFn","attackResult","Ship","dir","len","_position","_direction","_length","_coordinates","_damages","indexOfDamage","_setUpCoordinates","vector","dx","dy","_directionVector","newPosition","length","Object","assign","Gameboard","_shipLengths","_isPieceOnGameboard","_minimum","reduce","min","number","_distance","ship1","ship2","distances","distanceSquares","sqrt","_distanceFromPiece","placeShip","shipLength","isShipOnGameboard","_isShipOnGameboard","isDistanceSafe","_minimumDistance","shotPosition","isAllShipSunk","deletedLength","Game","setState","playerAttack","gameOver","winner","oldPosition","translation","initialState","gameResult","title","animationTarget","buttonNewGameActive","shipToMove","isUserDraging","App","useState","state","scores","setScores","setTitleInView","isGameStarted","setGameStarted","handleOnMouseUp","event","initialBoardCellsHidden","setAreBoardCellsHidden","useEffect","newBoardCellsHidden","setTimeout","Number","currentTarget","coordinates","minus","newState","translated","oldDirection","newDirection","newScores","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67447a16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/battleship.fe5c943a.svg\";","export default __webpack_public_path__ + \"static/media/hit.c844d5aa.png\";","export default __webpack_public_path__ + \"static/media/sunk.ba66429c.jpg\";","export default __webpack_public_path__ + \"static/media/missed.89c6a26f.png\";","import battleShip from \"../icons/battleship.svg\";\nimport hit from \"../icons/hit.png\";\nimport sunk from \"../icons/sunk.jpg\";\nimport missed from \"../icons/missed.png\";\n\nconst BoardCell = (props) => {\n  let picture;\n  let pictureSize = \"32px\";\n  let pictureStyle = {\n    position: \"relative\",\n    left: \"-8px\",\n    bottom: \"0\",\n    height: \"32px\",\n  };\n  const style = {};\n  let classNames = \"boardCell\";\n\n  switch (props.content[props.pos]) {\n    case \"B\":\n      picture = battleShip;\n      style.backgroundColor = \"skyblue\";\n      style.borderColor = \"steelblue\";\n      break;\n    case \"S\":\n      picture = sunk;\n      style.borderColor = \"yellow\";\n      break;\n    case \"X\":\n      picture = hit;\n      style.backgroundColor = \"yellow\";\n      style.borderColor = \"red\";\n      pictureSize = \"15px\";\n      pictureStyle = {};\n      break;\n    case \"/\":\n      picture = missed;\n      break;\n    default:\n      picture = \"#\";\n      pictureStyle = {};\n      pictureSize = \"32px\";\n  }\n  if (props.hide) classNames += \" hide\";\n  else classNames += \" show\";\n\n  return (\n    <button\n      className={classNames}\n      id={props.pos}\n      key={props.pos}\n      onClick={props.onClick}\n      onPointerDown={props.onMouseDown}\n      onPointerEnter={props.onMouseEnter}\n      onPointerUp={props.onMouseUp}\n      onDoubleClick={props.onDoubleClick}\n      disabled={props.disabled}\n      style={style}\n    >\n      <img alt=\"\" src={picture} width={pictureSize} style={pictureStyle} />\n    </button>\n  );\n};\n\nexport default BoardCell;\n","import BoardCell from \"./boardcell\";\n\nconst Board = (props) => {\n  const cells = [];\n  for (let i = 0; i < 100; i++) {\n    cells.push(i);\n  }\n\n  return (\n    <div className=\"board\" id={props.id} onMouseLeave={props.onMouseLeave}>\n      {cells.map((pos) => {\n        return (\n          <BoardCell\n            pos={pos}\n            key={pos}\n            content={props.content}\n            disabled={props.disabled}\n            onClick={props.onClick}\n            hide={props.areBoardCellsHidden[pos]}\n            onMouseDown={props.onMouseDown}\n            onMouseEnter={props.onMouseEnter}\n            onMouseUp={props.onMouseUp}\n            onDoubleClick={props.onDoubleClick}\n          ></BoardCell>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","const TitleBar = (props) => {\n  return (\n    <div className=\"titleBar\">\n      <h1 className={props.isTitleInView ? \"center\" : \"\"}>{props.text}</h1>\n      <div className=\"left\">\n        <h1 className=\"playerScore\">{props.playerScore}</h1>\n      </div>\n      <div className=\"right\">\n        <h1 className=\"computerScore\">{props.computerScore}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","export const findIndex = (array, pos) => {\n  return array.findIndex(function (element) {\n    return element.x === pos.x && element.y === pos.y;\n  });\n};\n\nexport function randomPosition() {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  return { x, y };\n}\n\nexport function randomDirection() {\n  return 90 * Math.floor(Math.random() * 4);\n}\n\nexport function getIndex(position) {\n  const x = position.x;\n  const y = position.y;\n  return 10 * (9 - y) + x;\n}\n\nexport function getPosition(index) {\n  const y = 9 - Math.floor(index / 10);\n  const x = index % 10;\n  return { x, y };\n}\n\nfunction getBoard(board, showShips) {\n  const gameboard = [];\n  for (let i = 0; i < 100; i++) {\n    gameboard.push(\" \");\n  }\n  board.missedShots.forEach((position) => {\n    const index = getIndex(position);\n    gameboard[index] = \"/\";\n  });\n  board.ships.forEach((ship) => {\n    if (ship.isSunk()) {\n      ship.getCoordinates().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"S\";\n      });\n    } else {\n      if (showShips) {\n        ship.getCoordinates().forEach((position) => {\n          const index = getIndex(position);\n          gameboard[index] = \"B\";\n        });\n      }\n      ship.getDamages().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"X\";\n      });\n    }\n  });\n  return gameboard;\n}\n\nexport function getState(game) {\n  const playerBoard = getBoard(game.player.board, true);\n  const enemyBoard = getBoard(game.computer.board, false);\n  return { playerBoard, enemyBoard };\n}\n\nexport function start(game) {\n  game.placeShips(game.player.board, [\n    { position: { x: 1, y: 2 }, direction: 90 },\n    { position: { x: 4, y: 4 }, direction: 0 },\n    { position: { x: 4, y: 9 }, direction: 0 },\n    { position: { x: 4, y: 1 }, direction: 0 },\n    { position: { x: 8, y: 7 }, direction: 90 },\n    { position: { x: 5, y: 7 }, direction: 0 },\n    { position: { x: 8, y: 1 }, direction: 0 },\n  ]);\n  game.placeShipsRandom(game.computer.board);\n}\n\n//animation reveiling gameboard\nexport function initialBoardCellsHidden() {\n  const initialBoardCellsHidden = [];\n  for (let i = 0; i < 100; i++) {\n    initialBoardCellsHidden.push(true);\n  }\n  return initialBoardCellsHidden;\n}\n\nexport function animateBoardCells(areBoardCellsHidden, target) {\n  if (areBoardCellsHidden.indexOf(!target) === -1) return areBoardCellsHidden;\n  else {\n    let index;\n    do {\n      index = getIndex(randomPosition());\n    } while (areBoardCellsHidden[index] !== !target);\n    areBoardCellsHidden[index] = target;\n    return areBoardCellsHidden;\n  }\n}\n\n//positioning ships by user\nexport function getShipIndex(board, position) {\n  const ships = board.ships;\n  const indexes = ships.map((ship) => {\n    const positions = ship.getCoordinates();\n    const index = findIndex(positions, position);\n    return index;\n  });\n  const shipIndex = indexes.findIndex((index) => {\n    return index !== -1;\n  });\n  return shipIndex;\n}\n\nexport function addPositions(pos1, pos2) {\n  const result = {};\n  result.x = pos1.x + pos2.x;\n  result.y = pos1.y + pos2.y;\n  return result;\n}\n\nexport function minus(position) {\n  const result = {};\n  result.x = -position.x;\n  result.y = -position.y;\n  return result;\n}\n\nexport function deleteShip(board, shipIndex) {\n  board.ships.splice(shipIndex, 1);\n  board.changeShipLengths(shipIndex);\n}\n","import { findIndex } from \"./helper\";\n\nfunction Player() {\n  this.name = \"\";\n  this.enemy = {};\n  this.board = {};\n\n  const _hasBeenHitEnemyShip = (shot) => {\n    const ships = this.enemy.board.ships;\n    const areShipsHit = ships.map((ship) => {\n      return !(findIndex(ship.getDamages(), shot) === -1);\n    });\n    return areShipsHit.indexOf(true) !== -1;\n  };\n\n  this.attack = (position) => {\n    const missedShots = this.enemy.board.missedShots;\n    let success = false;\n    let hit = false;\n    if (findIndex(missedShots, position) !== -1) return { success, hit };\n    else if (_hasBeenHitEnemyShip(position)) return { success, hit };\n    else {\n      hit = this.enemy.board.receiveAttack(position);\n      success = true;\n      return { success, hit };\n    }\n  };\n\n  this.autoAttack = (positionFn) => {\n    let attackResult = {};\n    do {\n      attackResult = this.attack(positionFn());\n    } while (!attackResult.success);\n    return attackResult;\n  };\n}\n\nexport default Player;\n","import { findIndex } from \"./helper\";\n\nfunction Ship(pos, dir, len) {\n  const _position = pos;\n  let _direction = dir;\n  let _length = len;\n  let _coordinates = [];\n  let _damages = [];\n\n  const _recordDamage = (index) => {\n    _damages.push({ ..._coordinates[index] });\n  };\n\n  this.hit = (position) => {\n    if (findIndex(_damages, position) !== -1) return false;\n    else {\n      const indexOfDamage = findIndex(_coordinates, position);\n      if (indexOfDamage === -1) return false;\n      else {\n        _recordDamage(indexOfDamage);\n        return true;\n      }\n    }\n  };\n\n  const _directionVector = () => {\n    let vector = { dx: 0, dy: 0 };\n    switch (_direction) {\n      case 0:\n        vector = { dx: 1, dy: 0 };\n        break;\n      case 90:\n        vector = { dx: 0, dy: 1 };\n        break;\n      case 180:\n        vector = { dx: -1, dy: 0 };\n        break;\n      case 270:\n        vector = { dx: 0, dy: -1 };\n        break;\n      default:\n    }\n    return vector;\n  };\n\n  const _setUpCoordinates = () => {\n    _coordinates = [];\n    _damages = [];\n    const { dx, dy } = { ..._directionVector() };\n    const newPosition = { ..._position };\n    for (let i = 0; i < _length; i++) {\n      _coordinates.push({ ...newPosition });\n      newPosition.x += dx;\n      newPosition.y += dy;\n    }\n  };\n\n  this.getCoordinates = () => {\n    return [..._coordinates];\n  };\n\n  this.getDamages = () => {\n    return [..._damages];\n  };\n\n  this.isSunk = () => {\n    return _damages.length === _length;\n  };\n\n  Object.assign(this, {\n    get position() {\n      return _position;\n    },\n\n    set position(position) {\n      _position.x = position.x;\n      _position.y = position.y;\n      _setUpCoordinates();\n    },\n\n    get direction() {\n      return _direction;\n    },\n\n    set direction(direction) {\n      _direction = direction;\n      _setUpCoordinates();\n    },\n\n    get length() {\n      return _length;\n    },\n\n    set length(length) {\n      _length = length;\n      _setUpCoordinates();\n    },\n  });\n\n  _setUpCoordinates();\n}\n\nexport default Ship;\n","import { findIndex } from \"./helper\";\nimport Ship from \"./ship\";\n\nfunction Gameboard() {\n  this.ships = [];\n  this.missedShots = [];\n  const _shipLengths = [5, 4, 3, 2, 2, 1, 1];\n\n  const _isPieceOnGameboard = (position) => {\n    const { x, y } = { ...position };\n    return x >= 0 && x < 10 && y >= 0 && y < 10;\n  };\n\n  const _isShipOnGameboard = (ship) => {\n    const arePiecesOnGameboard = ship\n      .getCoordinates()\n      .map((position) => _isPieceOnGameboard(position));\n    return arePiecesOnGameboard.indexOf(false) === -1;\n  };\n\n  const _minimum = (array) => {\n    return array.reduce((min, number) => {\n      if (number < min) return number;\n      else return min;\n    }, array[0]);\n  };\n\n  const _distanceFromPiece = (position, ship) => {\n    const { x, y } = { ...position };\n    const distanceSquares = ship\n      .getCoordinates()\n      .map((pos) => (x - pos.x) ** 2 + (y - pos.y) ** 2);\n    return Math.sqrt(_minimum(distanceSquares));\n  };\n\n  const _distance = (ship1, ship2) => {\n    const distances = ship1\n      .getCoordinates()\n      .map((pos) => _distanceFromPiece(pos, ship2));\n    return _minimum(distances);\n  };\n\n  const _minimumDistance = (ship1, ships) => {\n    const distances = ships.map((ship2) => _distance(ship1, ship2));\n    return _minimum(distances);\n  };\n\n  this.placeShip = (position, direction) => {\n    const shipLength = _shipLengths[this.ships.length];\n    const ship = new Ship(position, direction, shipLength);\n    const isShipOnGameboard = _isShipOnGameboard(ship);\n    const isDistanceSafe =\n      _minimumDistance(ship, this.ships) >= 2 || this.ships.length === 0;\n    const success = isShipOnGameboard && isDistanceSafe;\n    if (success) this.ships.push(ship);\n    return success;\n  };\n\n  const _indexOfShipGotHit = (shotPosition, ships) => {\n    const hits = ships.map((ship) => ship.hit(shotPosition));\n    return hits.indexOf(true);\n  };\n\n  this.receiveAttack = (position) => {\n    if (!_isPieceOnGameboard(position)) return false;\n    else {\n      if (_indexOfShipGotHit(position, this.ships) !== -1) {\n        return true;\n      } else {\n        if (\n          findIndex(this.missedShots, position) === -1 ||\n          this.missedShots.length === 0\n        ) {\n          this.missedShots.push({ ...position });\n        }\n        return false;\n      }\n    }\n  };\n\n  this.isAllShipSunk = () => {\n    const isShipsSunk = this.ships.map((ship) => ship.isSunk());\n    if (isShipsSunk.indexOf(false) === -1) return true;\n    else return false;\n  };\n\n  this.changeShipLengths = (index) => {\n    const deletedLength = _shipLengths.splice(index, 1);\n    _shipLengths.push(deletedLength);\n  };\n}\n\nexport default Gameboard;\n","import Player from \"./player\";\nimport Gameboard from \"./gameboard\";\nimport { randomPosition, randomDirection, getState } from \"./helper\";\n\nfunction Game() {\n  this.player = new Player();\n  this.player.name = \"player\";\n  this.player.board = new Gameboard();\n  this.computer = new Player();\n  this.computer.name = \"computer\";\n  this.computer.board = new Gameboard();\n  this.player.enemy = this.computer;\n  this.computer.enemy = this.player;\n  this.setState = () => {};\n\n  this.placeShips = (board, ships) => {\n    ships.forEach((ship) => {\n      board.placeShip(ship.position, ship.direction);\n    });\n  };\n\n  this.placeShipsRandom = (board) => {\n    for (let i = 0; i < 7; i++) {\n      while (!board.placeShip(randomPosition(), randomDirection()));\n    }\n  };\n\n  this.playerAttack = (position) => {\n    let attackResult = this.player.attack(position);\n    let gameOver = false;\n    let winner = {};\n    if (!attackResult.success) return { gameOver, winner };\n    //update the DOM here\n    this.setState(getState(this));\n    if (attackResult.hit) {\n      gameOver = this.computer.board.isAllShipSunk();\n      if (gameOver) winner = this.player;\n    } else {\n      do {\n        attackResult = this.computer.autoAttack(randomPosition);\n        //update the DOM here\n        this.setState(getState(this));\n        gameOver = this.player.board.isAllShipSunk();\n        if (gameOver) winner = this.computer;\n      } while (attackResult.hit && !gameOver);\n    }\n    return { gameOver, winner };\n  };\n}\n\nexport default Game;\n","import \"./App.css\";\nimport Board from \"./components/board\";\nimport TitleBar from \"./components/titlebar\";\nimport { useState, useEffect } from \"react\";\nimport Game from \"./game\";\nimport {\n  getState,\n  getPosition,\n  getIndex,\n  initialBoardCellsHidden,\n  animateBoardCells,\n  start,\n  getShipIndex,\n  addPositions,\n  minus,\n  deleteShip,\n} from \"./helper\";\n\nlet game = new Game();\nstart(game);\nconst initialState = getState(game);\nlet gameResult = {\n  gameOver: true,\n  winner: \"\",\n};\nlet title = \"BATTLESHIP\";\nlet animationTarget = false;\nlet buttonNewGameActive = true;\nconst shipToMove = {};\nlet oldPosition;\nlet translation;\nlet isUserDraging = false;\n\nfunction App() {\n  const [state, setState] = useState(initialState);\n  const [scores, setScores] = useState({\n    player: 0,\n    computer: 0,\n  });\n  const [isTitleInView, setTitleInView] = useState(false);\n  const [isGameStarted, setGameStarted] = useState(false);\n\n  const onClick = (event) => {\n    const id = event.target.id;\n    if (!id) return;\n    const result = game.playerAttack(getPosition(id));\n    gameResult = { ...result };\n    if (result.gameOver) {\n      const newScores = { ...scores };\n      const winner = result.winner.name;\n      newScores[winner] += 1;\n      setScores(newScores);\n      title = `GAME OVER, ${winner.toUpperCase()} WON`;\n      buttonNewGameActive = true;\n    }\n  };\n\n  const handleClickNewGame = () => {\n    if (isGameStarted) {\n      buttonNewGameActive = false;\n      game = new Game();\n      start(game);\n      gameResult = {\n        gameOver: true,\n        winner: \"\",\n      };\n      animationTarget = true;\n      setTitleInView(false);\n      setTimeout(() => {\n        title = \"BATTLESHIP\";\n        animationTarget = false;\n        buttonNewGameActive = true;\n        setState(initialState);\n        setTitleInView(true);\n        setGameStarted(false);\n      }, 4000);\n    } else {\n      buttonNewGameActive = false;\n      gameResult.gameOver = false;\n      setGameStarted(true);\n    }\n  };\n\n  const handleOnMouseDown = (event) => {\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    shipToMove.position = { ...ship.position };\n    shipToMove.direction = ship.direction;\n    shipToMove.length = ship.length;\n    shipToMove.coordinates = ship.getCoordinates();\n    oldPosition = { ...position };\n    deleteShip(board, shipIndex);\n    isUserDraging = true;\n  };\n\n  const handleOnMouseEnter = (event) => {\n    if (!isUserDraging) return;\n    const position = getPosition(Number(event.currentTarget.id));\n    translation = addPositions(position, minus(oldPosition));\n    const newState = getState(game);\n    const board = newState.playerBoard;\n    shipToMove.coordinates.forEach((pos) => {\n      const translated = addPositions(pos, translation);\n      const index = getIndex(translated);\n      if (\n        translated.x >= 0 &&\n        translated.x < 10 &&\n        translated.y >= 0 &&\n        translated.y < 10\n      )\n        board[index] = \"B\";\n    });\n    setState(newState);\n  };\n\n  const handleOnMouseUp = (event) => {\n    if (!isUserDraging) return;\n    const board = game.player.board;\n    const newPosition = addPositions(shipToMove.position, translation);\n    const success = board.placeShip(newPosition, shipToMove.direction);\n    if (!success) board.placeShip(shipToMove.position, shipToMove.direction);\n    isUserDraging = false;\n    setState(getState(game));\n  };\n\n  const handleDoubleClick = (event) => {\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    const oldDirection = ship.direction;\n    const oldPosition = ship.position;\n    const newDirection = (oldDirection + 90) % 360;\n    deleteShip(board, shipIndex);\n    const success = board.placeShip(oldPosition, newDirection);\n    if (!success) board.placeShip(oldPosition, oldDirection);\n    setState(getState(game));\n  };\n\n  game.setState = setState;\n\n  //animation reveiling gameboard\n  const [areBoardCellsHidden, setAreBoardCellsHidden] = useState(\n    initialBoardCellsHidden()\n  );\n\n  useEffect(() => {\n    if (areBoardCellsHidden.indexOf(!animationTarget) !== -1) {\n      let newBoardCellsHidden = animateBoardCells(\n        [...areBoardCellsHidden],\n        animationTarget\n      );\n      newBoardCellsHidden = animateBoardCells(\n        newBoardCellsHidden,\n        animationTarget\n      );\n      setAreBoardCellsHidden(newBoardCellsHidden);\n    }\n  }, [areBoardCellsHidden, isTitleInView]);\n\n  useEffect(() => {\n    setTitleInView(true);\n  }, []);\n\n  return (\n    <div>\n      <TitleBar\n        isTitleInView={isTitleInView}\n        playerScore={scores.player}\n        computerScore={scores.computer}\n        text={title}\n      />\n      <div className=\"gameArea\">\n        <div className=\"boardContainer\">\n          <button\n            className=\"gameControl\"\n            onClick={handleClickNewGame}\n            disabled={!buttonNewGameActive}\n          >\n            {isGameStarted ? \"New Game\" : \"Start\"}\n          </button>\n          <Board\n            id=\"player\"\n            content={state.playerBoard}\n            disabled={isGameStarted}\n            areBoardCellsHidden={areBoardCellsHidden}\n            onMouseDown={handleOnMouseDown}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseUp={handleOnMouseUp}\n            onMouseLeave={handleOnMouseUp}\n            onDoubleClick={handleDoubleClick}\n          />\n        </div>\n        <div className=\"boardContainer\">\n          <button className=\"gameControl\">Reset</button>\n          <Board\n            id=\"computer\"\n            content={state.enemyBoard}\n            disabled={gameResult.gameOver}\n            onClick={onClick}\n            areBoardCellsHidden={areBoardCellsHidden}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}