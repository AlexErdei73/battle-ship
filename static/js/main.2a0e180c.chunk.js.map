{"version":3,"sources":["icons/battleship.svg","icons/hit.png","icons/sunk.jpg","icons/missed.png","components/boardcell.jsx","components/board.jsx","components/titlebar.jsx","components/usage.jsx","components/winner.jsx","helper.js","player.js","ship.js","gameboard.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["BoardCell","props","picture","pictureSize","pictureStyle","position","left","bottom","height","style","classNames","content","pos","battleShip","backgroundColor","borderColor","sunk","hit","missed","hide","className","id","onClick","onPointerDown","onPointerMove","onPointerUp","onDoubleClick","disabled","alt","src","width","Board","cells","i","push","onMouseLeave","map","areBoardCellsHidden","TitleBar","isTitleInView","text","playerScore","computerScore","Usage","Winner","winner","name","toUpperCase","findIndex","array","element","x","y","randomPosition","Math","floor","random","getIndex","getPosition","index","getBoard","board","showShips","gameboard","missedShots","forEach","ships","ship","isSunk","getCoordinates","getDamages","getState","game","playerBoard","player","enemyBoard","computer","start","placeShipsRandom","initialBoardCellsHidden","animateBoardCells","target","indexOf","getShipIndex","positions","addPositions","pos1","pos2","result","minus","deleteShip","shipIndex","splice","changeShipLengths","Player","this","enemy","attack","shot","success","receiveAttack","isPieceOnGameboard","autoAttack","positionFn","attackResult","firstHit","nextAttacks","direction","isEqual","autoAttackSmart","pop","isAttackTooCloseToSunkShips","length","Ship","dir","len","_position","_direction","_length","_coordinates","_damages","indexOfDamage","_setUpCoordinates","vector","dx","dy","_directionVector","newPosition","Object","assign","Gameboard","_shipLengths","_minimum","reduce","min","number","_distanceFromPiece","distanceSquares","sqrt","_minimumDistance","ship1","distances","ship2","_distance","placeShip","shipLength","isShipOnGameboard","_isShipOnGameboard","isDistanceSafe","shotPosition","isAllShipSunk","deletedLength","filter","Game","nextPlayer","placeShips","playerAttack","gameOver","computerAttack","oldPosition","translation","initialState","gameResult","title","animationTarget","buttonNewGameActive","shipToMove","isUserDraging","App","useState","state","setState","scores","setScores","setTitleInView","isGameStarted","setGameStarted","handleResult","newScores","handleOnMouseUp","event","setAreBoardCellsHidden","animateBoard","setTimeout","newBoardCellsHidden","useEffect","Number","currentTarget","coordinates","document","elementFromPoint","clientX","clientY","newState","translated","oldDirection","newDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a0e180c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/battleship.fe5c943a.svg\";","export default __webpack_public_path__ + \"static/media/hit.c844d5aa.png\";","export default __webpack_public_path__ + \"static/media/sunk.ba66429c.jpg\";","export default __webpack_public_path__ + \"static/media/missed.89c6a26f.png\";","import battleShip from \"../icons/battleship.svg\";\nimport hit from \"../icons/hit.png\";\nimport sunk from \"../icons/sunk.jpg\";\nimport missed from \"../icons/missed.png\";\n\nconst BoardCell = (props) => {\n  let picture;\n  let pictureSize = \"27px\";\n  let pictureStyle = {\n    position: \"relative\",\n    left: \"-8px\",\n    bottom: \"0\",\n    height: \"27px\",\n  };\n  const style = {};\n  let classNames = \"boardCell\";\n\n  switch (props.content[props.pos]) {\n    case \"B\":\n      picture = battleShip;\n      style.backgroundColor = \"skyblue\";\n      style.borderColor = \"steelblue\";\n      break;\n    case \"S\":\n      picture = sunk;\n      style.borderColor = \"yellow\";\n      break;\n    case \"X\":\n      picture = hit;\n      style.backgroundColor = \"yellow\";\n      style.borderColor = \"red\";\n      pictureSize = \"12px\";\n      pictureStyle = {};\n      break;\n    case \"/\":\n      picture = missed;\n      break;\n    default:\n      picture = \"#\";\n      pictureStyle = {};\n      pictureSize = \"27px\";\n  }\n  if (props.hide) classNames += \" hide\";\n  else classNames += \" show\";\n\n  return (\n    <button\n      className={classNames}\n      id={props.pos}\n      key={props.pos}\n      onClick={props.onClick}\n      onPointerDown={props.onPointerDown}\n      onPointerMove={props.onPointerMove}\n      onPointerUp={props.onPointerUp}\n      onDoubleClick={props.onDoubleClick}\n      disabled={props.disabled}\n      style={style}\n    >\n      <img alt=\"\" src={picture} width={pictureSize} style={pictureStyle} />\n    </button>\n  );\n};\n\nexport default BoardCell;\n","import BoardCell from \"./boardcell\";\n\nconst Board = (props) => {\n  const cells = [];\n  for (let i = 0; i < 100; i++) {\n    cells.push(i);\n  }\n\n  return (\n    <div className=\"board\" id={props.id} onMouseLeave={props.onMouseLeave}>\n      {cells.map((pos) => {\n        return (\n          <BoardCell\n            pos={pos}\n            key={pos}\n            content={props.content}\n            disabled={props.disabled}\n            onClick={props.onClick}\n            hide={props.areBoardCellsHidden[pos]}\n            onPointerDown={props.onPointerDown}\n            onPointerMove={props.onPointerMove}\n            onPointerUp={props.onPointerUp}\n            onDoubleClick={props.onDoubleClick}\n          ></BoardCell>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","const TitleBar = (props) => {\n  return (\n    <div className=\"titleBar\">\n      <h1 className={props.isTitleInView ? \"center\" : \"\"}>{props.text}</h1>\n      <div className=\"left\">\n        <h1 className=\"playerScore\">{props.playerScore}</h1>\n      </div>\n      <div className=\"right\">\n        <h1 className=\"computerScore\">{props.computerScore}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default TitleBar;\n","const Usage = (props) => {\n  let classNames = \"info\";\n  if (props.hide) classNames += \" hide\";\n  else classNames += \" show\";\n\n  return (\n    <div className={classNames} id=\"usage\">\n      <p>\n        You can drag and drop your ships to their place. Use double click to\n        rotate the ships. The program maintains 2 cells distance between the\n        ships and keeps them on the game board.\n      </p>\n    </div>\n  );\n};\n\nexport default Usage;\n","const Winner = (props) => {\n  let classNames = \"info\";\n  if (props.hide) classNames += \" hide\";\n  else classNames += \" show\";\n\n  return (\n    <h1 className={classNames} id=\"winner\">\n      {!props.winner.name\n        ? \"WINNER:\"\n        : `WINNER: ${props.winner.name.toUpperCase()}`}\n    </h1>\n  );\n};\n\nexport default Winner;\n","export const findIndex = (array, pos) => {\n  return array.findIndex(function (element) {\n    return element.x === pos.x && element.y === pos.y;\n  });\n};\n\nexport function randomPosition() {\n  const x = Math.floor(Math.random() * 10);\n  const y = Math.floor(Math.random() * 10);\n  return { x, y };\n}\n\nexport function randomDirection() {\n  return 90 * Math.floor(Math.random() * 4);\n}\n\nexport function getIndex(position) {\n  const x = position.x;\n  const y = position.y;\n  return 10 * (9 - y) + x;\n}\n\nexport function getPosition(index) {\n  const y = 9 - Math.floor(index / 10);\n  const x = index % 10;\n  return { x, y };\n}\n\nfunction getBoard(board, showShips) {\n  const gameboard = [];\n  for (let i = 0; i < 100; i++) {\n    gameboard.push(\" \");\n  }\n  board.missedShots.forEach((position) => {\n    const index = getIndex(position);\n    gameboard[index] = \"/\";\n  });\n  board.ships.forEach((ship) => {\n    if (ship.isSunk()) {\n      ship.getCoordinates().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"S\";\n      });\n    } else {\n      if (showShips) {\n        ship.getCoordinates().forEach((position) => {\n          const index = getIndex(position);\n          gameboard[index] = \"B\";\n        });\n      }\n      ship.getDamages().forEach((position) => {\n        const index = getIndex(position);\n        gameboard[index] = \"X\";\n      });\n    }\n  });\n  return gameboard;\n}\n\nexport function getState(game) {\n  const playerBoard = getBoard(game.player.board, true);\n  const enemyBoard = getBoard(game.computer.board, false);\n  return { playerBoard, enemyBoard };\n}\n\nexport function start(game) {\n  game.placeShipsRandom(game.player.board);\n  game.placeShipsRandom(game.computer.board);\n}\n\n//animation reveiling gameboard\nexport function initialBoardCellsHidden() {\n  const initialBoardCellsHidden = [];\n  for (let i = 0; i < 100; i++) {\n    initialBoardCellsHidden.push(true);\n  }\n  return initialBoardCellsHidden;\n}\n\nexport function animateBoardCells(areBoardCellsHidden, target) {\n  if (areBoardCellsHidden.indexOf(!target) === -1) return areBoardCellsHidden;\n  else {\n    let index;\n    do {\n      index = getIndex(randomPosition());\n    } while (areBoardCellsHidden[index] !== !target);\n    areBoardCellsHidden[index] = target;\n    return areBoardCellsHidden;\n  }\n}\n\n//positioning ships by user\nexport function getShipIndex(board, position) {\n  const ships = board.ships;\n  const indexes = ships.map((ship) => {\n    const positions = ship.getCoordinates();\n    const index = findIndex(positions, position);\n    return index;\n  });\n  const shipIndex = indexes.findIndex((index) => {\n    return index !== -1;\n  });\n  return shipIndex;\n}\n\nexport function addPositions(pos1, pos2) {\n  const result = {};\n  result.x = pos1.x + pos2.x;\n  result.y = pos1.y + pos2.y;\n  return result;\n}\n\nexport function minus(position) {\n  const result = {};\n  result.x = -position.x;\n  result.y = -position.y;\n  return result;\n}\n\nexport function deleteShip(board, shipIndex) {\n  board.ships.splice(shipIndex, 1);\n  board.changeShipLengths(shipIndex);\n}\n","import { findIndex, addPositions, minus } from \"./helper\";\n\nfunction Player() {\n  this.name = \"\";\n  this.enemy = {};\n  this.board = {};\n\n  const _hasBeenHitEnemyShip = (shot) => {\n    const ships = this.enemy.board.ships;\n    const areShipsHit = ships.map((ship) => {\n      return !(findIndex(ship.getDamages(), shot) === -1);\n    });\n    return areShipsHit.indexOf(true) !== -1;\n  };\n\n  this.attack = (position) => {\n    const missedShots = this.enemy.board.missedShots;\n    let success = false;\n    let hit = -1;\n    if (!position) return { success, hit };\n    if (findIndex(missedShots, position) !== -1) return { success, hit };\n    else if (_hasBeenHitEnemyShip(position)) return { success, hit };\n    else {\n      hit = this.enemy.board.receiveAttack(position);\n      success = this.enemy.board.isPieceOnGameboard(position);\n      return { success, hit };\n    }\n  };\n\n  this.autoAttack = (positionFn) => {\n    let attackResult = {};\n    do {\n      attackResult = this.attack(positionFn());\n    } while (!attackResult.success);\n    return attackResult;\n  };\n\n  let firstHit = { x: -1, y: -1 };\n  let nextAttacks = [];\n  let direction = { x: 0, y: 0 };\n\n  const isEqual = (pos1, pos2) => pos1.x === pos2.x && pos1.y === pos2.y;\n\n  this.autoAttackSmart = (positionFn) => {\n    let attackResult = {};\n    const board = this.enemy.board;\n    let position;\n    do {\n      if (isEqual(firstHit, { x: -1, y: -1 })) position = positionFn();\n      else position = nextAttacks.pop();\n      if (board.isAttackTooCloseToSunkShips(position)) {\n        attackResult.success = false;\n        attackResult.hit = -1;\n      } else attackResult = this.attack(position);\n      if (!attackResult.success && !isEqual(direction, { x: 0, y: 0 }))\n        direction = minus(direction);\n    } while (!attackResult.success);\n    if (attackResult.hit !== -1) {\n      if (board.ships[attackResult.hit].isSunk()) {\n        firstHit = { x: -1, y: -1 };\n        nextAttacks = [];\n        direction = { x: 0, y: 0 };\n      } else if (isEqual(firstHit, { x: -1, y: -1 })) {\n        firstHit = position;\n        if (nextAttacks.length === 0) {\n          nextAttacks.push(addPositions(firstHit, { x: 0, y: -1 }));\n          nextAttacks.push(addPositions(firstHit, { x: -1, y: 0 }));\n          nextAttacks.push(addPositions(firstHit, { x: 0, y: 1 }));\n          nextAttacks.push(addPositions(firstHit, { x: 1, y: 0 }));\n        }\n      } else {\n        if (isEqual(direction, { x: 0, y: 0 })) {\n          direction = addPositions(position, minus(firstHit));\n          nextAttacks = [\n            addPositions(firstHit, minus(direction)),\n            addPositions(position, direction),\n          ];\n        } else {\n          nextAttacks.push(addPositions(position, direction));\n        }\n      }\n    } else if (\n      !isEqual(firstHit, { x: -1, y: -1 }) &&\n      !isEqual(direction, { x: 0, y: 0 })\n    ) {\n      direction = minus(direction);\n    }\n    return attackResult;\n  };\n}\n\nexport default Player;\n","import { findIndex } from \"./helper\";\n\nfunction Ship(pos, dir, len) {\n  const _position = pos;\n  let _direction = dir;\n  let _length = len;\n  let _coordinates = [];\n  let _damages = [];\n\n  const _recordDamage = (index) => {\n    _damages.push({ ..._coordinates[index] });\n  };\n\n  this.hit = (position) => {\n    if (findIndex(_damages, position) !== -1) return false;\n    else {\n      const indexOfDamage = findIndex(_coordinates, position);\n      if (indexOfDamage === -1) return false;\n      else {\n        _recordDamage(indexOfDamage);\n        return true;\n      }\n    }\n  };\n\n  const _directionVector = () => {\n    let vector = { dx: 0, dy: 0 };\n    switch (_direction) {\n      case 0:\n        vector = { dx: 1, dy: 0 };\n        break;\n      case 90:\n        vector = { dx: 0, dy: 1 };\n        break;\n      case 180:\n        vector = { dx: -1, dy: 0 };\n        break;\n      case 270:\n        vector = { dx: 0, dy: -1 };\n        break;\n      default:\n    }\n    return vector;\n  };\n\n  const _setUpCoordinates = () => {\n    _coordinates = [];\n    _damages = [];\n    const { dx, dy } = { ..._directionVector() };\n    const newPosition = { ..._position };\n    for (let i = 0; i < _length; i++) {\n      _coordinates.push({ ...newPosition });\n      newPosition.x += dx;\n      newPosition.y += dy;\n    }\n  };\n\n  this.getCoordinates = () => {\n    return [..._coordinates];\n  };\n\n  this.getDamages = () => {\n    return [..._damages];\n  };\n\n  this.isSunk = () => {\n    return _damages.length === _coordinates.length;\n  };\n\n  Object.assign(this, {\n    get position() {\n      return _position;\n    },\n\n    set position(position) {\n      _position.x = position.x;\n      _position.y = position.y;\n      _setUpCoordinates();\n    },\n\n    get direction() {\n      return _direction;\n    },\n\n    set direction(direction) {\n      _direction = direction;\n      _setUpCoordinates();\n    },\n\n    get length() {\n      return _length;\n    },\n\n    set length(length) {\n      _length = length;\n      _setUpCoordinates();\n    },\n  });\n\n  _setUpCoordinates();\n}\n\nexport default Ship;\n","import { findIndex } from \"./helper\";\nimport Ship from \"./ship\";\n\nfunction Gameboard() {\n  this.ships = [];\n  this.missedShots = [];\n  const _shipLengths = [5, 4, 3, 2, 2, 1, 1];\n\n  this.isPieceOnGameboard = (position) => {\n    const { x, y } = { ...position };\n    return x >= 0 && x < 10 && y >= 0 && y < 10;\n  };\n\n  const _isShipOnGameboard = (ship) => {\n    const arePiecesOnGameboard = ship\n      .getCoordinates()\n      .map((position) => this.isPieceOnGameboard(position));\n    return arePiecesOnGameboard.indexOf(false) === -1;\n  };\n\n  const _minimum = (array) => {\n    return array.reduce((min, number) => {\n      if (number < min) return number;\n      else return min;\n    }, array[0]);\n  };\n\n  const _distanceFromPiece = (position, ship) => {\n    const { x, y } = { ...position };\n    const distanceSquares = ship\n      .getCoordinates()\n      .map((pos) => (x - pos.x) ** 2 + (y - pos.y) ** 2);\n    return Math.sqrt(_minimum(distanceSquares));\n  };\n\n  const _distance = (ship1, ship2) => {\n    const distances = ship1\n      .getCoordinates()\n      .map((pos) => _distanceFromPiece(pos, ship2));\n    return _minimum(distances);\n  };\n\n  const _minimumDistance = (ship1, ships) => {\n    const distances = ships.map((ship2) => _distance(ship1, ship2));\n    return _minimum(distances);\n  };\n\n  this.placeShip = (position, direction) => {\n    const shipLength = _shipLengths[this.ships.length];\n    const ship = new Ship(position, direction, shipLength);\n    const isShipOnGameboard = _isShipOnGameboard(ship);\n    const isDistanceSafe =\n      _minimumDistance(ship, this.ships) >= 2 || this.ships.length === 0;\n    const success = isShipOnGameboard && isDistanceSafe;\n    if (success) this.ships.push(ship);\n    return success;\n  };\n\n  const _indexOfShipGotHit = (shotPosition, ships) => {\n    const hits = ships.map((ship) => ship.hit(shotPosition));\n    return hits.indexOf(true);\n  };\n\n  this.receiveAttack = (position) => {\n    if (!this.isPieceOnGameboard(position)) return -1;\n    else {\n      const shipIndex = _indexOfShipGotHit(position, this.ships);\n      if (shipIndex !== -1) {\n        return shipIndex;\n      } else {\n        if (\n          findIndex(this.missedShots, position) === -1 ||\n          this.missedShots.length === 0\n        ) {\n          this.missedShots.push({ ...position });\n        }\n        return -1;\n      }\n    }\n  };\n\n  this.isAllShipSunk = () => {\n    const isShipsSunk = this.ships.map((ship) => ship.isSunk());\n    if (isShipsSunk.indexOf(false) === -1) return true;\n    else return false;\n  };\n\n  this.changeShipLengths = (index) => {\n    const deletedLength = _shipLengths.splice(index, 1);\n    _shipLengths.push(deletedLength);\n  };\n\n  this.isAttackTooCloseToSunkShips = (position) => {\n    const sunkShips = this.ships.filter((ship) => {\n      return ship.isSunk();\n    });\n    const distances = sunkShips.map((ship) => {\n      return _distanceFromPiece(position, ship);\n    });\n    return _minimum(distances) < 2;\n  };\n}\n\nexport default Gameboard;\n","import Player from \"./player\";\nimport Gameboard from \"./gameboard\";\nimport { randomPosition, randomDirection, getState } from \"./helper\";\n\nfunction Game() {\n  this.player = new Player();\n  this.player.name = \"player\";\n  this.player.board = new Gameboard();\n  this.computer = new Player();\n  this.computer.name = \"computer\";\n  this.computer.board = new Gameboard();\n  this.player.enemy = this.computer;\n  this.computer.enemy = this.player;\n  this.nextPlayer = this.player;\n\n  this.placeShips = (board, ships) => {\n    ships.forEach((ship) => {\n      board.placeShip(ship.position, ship.direction);\n    });\n  };\n\n  this.placeShipsRandom = (board) => {\n    for (let i = 0; i < 7; i++) {\n      while (!board.placeShip(randomPosition(), randomDirection()));\n    }\n  };\n\n  this.playerAttack = (position) => {\n    let attackResult = this.player.attack(position);\n    let gameOver = false;\n    let winner = {};\n    if (!attackResult.success) return { gameOver, winner };\n    if (attackResult.hit !== -1) {\n      gameOver = this.computer.board.isAllShipSunk();\n      if (gameOver) winner = this.player;\n      if (!gameOver) this.nextPlayer = this.player;\n    } else this.nextPlayer = this.computer;\n    return { gameOver, winner };\n  };\n\n  this.computerAttack = () => {\n    let attackResult = this.computer.autoAttackSmart(randomPosition);\n    let gameOver = false;\n    let winner = {};\n    gameOver = this.player.board.isAllShipSunk();\n    if (gameOver) winner = this.computer;\n    if (attackResult.hit !== -1 && !gameOver) this.nextPlayer = this.computer;\n    else this.nextPlayer = this.player;\n    return { gameOver, winner };\n  };\n}\n\nexport default Game;\n","import \"./App.css\";\nimport Board from \"./components/board\";\nimport TitleBar from \"./components/titlebar\";\nimport Usage from \"./components/usage\";\nimport Winner from \"./components/winner\";\nimport { useState, useEffect } from \"react\";\nimport Game from \"./game\";\nimport {\n  getState,\n  getPosition,\n  getIndex,\n  initialBoardCellsHidden,\n  animateBoardCells,\n  start,\n  getShipIndex,\n  addPositions,\n  minus,\n  deleteShip,\n} from \"./helper\";\n\nlet game = new Game();\nstart(game);\nconst initialState = getState(game);\nlet gameResult = {\n  gameOver: true,\n  winner: \"\",\n};\nlet title = \"BATTLESHIP\";\nlet animationTarget = false;\nlet buttonNewGameActive = true;\nconst shipToMove = {};\nlet oldPosition;\nlet translation;\nlet isUserDraging = false;\n\nfunction App() {\n  const [state, setState] = useState(initialState);\n  const [scores, setScores] = useState({\n    player: 0,\n    computer: 0,\n  });\n  const [isTitleInView, setTitleInView] = useState(false);\n  const [isGameStarted, setGameStarted] = useState(false);\n\n  const handleResult = (result) => {\n    gameResult = { ...result };\n    if (result.gameOver) {\n      const newScores = { ...scores };\n      const winner = result.winner.name;\n      newScores[winner] += 1;\n      setScores(newScores);\n      title = \"GAME OVER\";\n      buttonNewGameActive = true;\n    }\n  };\n\n  const onClick = (event) => {\n    const id = event.target.id;\n    if (!id || game.nextPlayer !== game.player) return;\n    const result = game.playerAttack(getPosition(id));\n    handleResult(result);\n    setState(getState(game));\n  };\n\n  const handleClickNewGame = () => {\n    if (isGameStarted) {\n      buttonNewGameActive = false;\n      game = new Game();\n      start(game);\n      gameResult = {\n        gameOver: true,\n        winner: \"\",\n      };\n      animationTarget = true;\n      setTitleInView(false);\n      animateBoard();\n      setTimeout(() => {\n        title = \"BATTLESHIP\";\n        animationTarget = false;\n        setAreBoardCellsHidden(initialBoardCellsHidden());\n        buttonNewGameActive = true;\n        setState(getState(game));\n        setTitleInView(true);\n        setGameStarted(false);\n      }, 4000);\n    } else {\n      buttonNewGameActive = false;\n      gameResult.gameOver = false;\n      setGameStarted(true);\n    }\n  };\n\n  const handleOnMouseDown = (event) => {\n    if (isGameStarted) return;\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    shipToMove.position = { ...ship.position };\n    shipToMove.direction = ship.direction;\n    shipToMove.length = ship.length;\n    shipToMove.coordinates = ship.getCoordinates();\n    oldPosition = { ...position };\n    deleteShip(board, shipIndex);\n    isUserDraging = true;\n    translation = { x: 0, y: 0 };\n  };\n\n  const handleOnMouseUp = (event) => {\n    if (!isUserDraging) return;\n    const board = game.player.board;\n    const newPosition = addPositions(shipToMove.position, translation);\n    const success = board.placeShip(newPosition, shipToMove.direction);\n    if (!success) board.placeShip(shipToMove.position, shipToMove.direction);\n    isUserDraging = false;\n    setState(getState(game));\n  };\n\n  const handleOnMouseMove = (event) => {\n    if (!isUserDraging) return;\n    let position;\n    const element = document.elementFromPoint(event.clientX, event.clientY);\n    if (!element || element.className.indexOf(\"boardCell\") === -1) {\n      position = oldPosition;\n      isUserDraging = false;\n      game.player.board.placeShip(shipToMove.position, shipToMove.direction);\n    } else position = getPosition(Number(element.id));\n    translation = addPositions(position, minus(oldPosition));\n    const newState = getState(game);\n    const board = newState.playerBoard;\n    shipToMove.coordinates.forEach((pos) => {\n      const translated = addPositions(pos, translation);\n      const index = getIndex(translated);\n      if (\n        translated.x >= 0 &&\n        translated.x < 10 &&\n        translated.y >= 0 &&\n        translated.y < 10\n      )\n        board[index] = \"B\";\n    });\n    setState(newState);\n  };\n\n  const handleDoubleClick = (event) => {\n    handleOnMouseUp(event);\n    const position = getPosition(Number(event.currentTarget.id));\n    const board = game.player.board;\n    const ships = board.ships;\n    const shipIndex = getShipIndex(board, position);\n    if (shipIndex === -1) return;\n    const ship = ships[shipIndex];\n    const oldDirection = ship.direction;\n    const oldPosition = ship.position;\n    const newDirection = (oldDirection + 90) % 360;\n    deleteShip(board, shipIndex);\n    const success = board.placeShip(oldPosition, newDirection);\n    if (!success) board.placeShip(oldPosition, oldDirection);\n    setState(getState(game));\n  };\n\n  //animation reveiling gameboard\n  const [areBoardCellsHidden, setAreBoardCellsHidden] = useState(\n    initialBoardCellsHidden()\n  );\n\n  const animateBoard = () => {\n    if (areBoardCellsHidden.indexOf(!animationTarget) !== -1) {\n      setTimeout(() => {\n        let newBoardCellsHidden = animateBoardCells(\n          animateBoardCells([...areBoardCellsHidden], animationTarget),\n          animationTarget\n        );\n        setAreBoardCellsHidden(newBoardCellsHidden);\n      }, 50);\n    }\n  };\n\n  useEffect(animateBoard, [areBoardCellsHidden]);\n\n  useEffect(() => {\n    setTitleInView(true);\n  }, []);\n\n  useEffect(() => {\n    if (game.nextPlayer !== game.computer || gameResult.gameOver) return;\n    const result = game.computerAttack();\n    handleResult(result);\n    setTimeout(() => {\n      setState(getState(game));\n    }, 300);\n  }, [state]);\n\n  return (\n    <div>\n      <TitleBar\n        isTitleInView={isTitleInView}\n        playerScore={scores.player}\n        computerScore={scores.computer}\n        text={title}\n      />\n      <div className=\"gameArea\">\n        <Winner\n          winner={gameResult.winner}\n          hide={!buttonNewGameActive || !gameResult.gameOver || !isGameStarted}\n        ></Winner>\n        <div className=\"boardContainer\">\n          <button\n            className=\"gameControl\"\n            onClick={handleClickNewGame}\n            disabled={!buttonNewGameActive}\n          >\n            {isGameStarted ? \"New Game\" : \"Start\"}\n          </button>\n          <Board\n            id=\"player\"\n            content={state.playerBoard}\n            disabled={isGameStarted}\n            areBoardCellsHidden={areBoardCellsHidden}\n            onPointerDown={handleOnMouseDown}\n            onPointerMove={handleOnMouseMove}\n            onPointerUp={handleOnMouseUp}\n            onMouseLeave={handleOnMouseUp}\n            onDoubleClick={handleDoubleClick}\n          />\n        </div>\n        <div className=\"boardContainer\">\n          <button className=\"gameControl\">Reset</button>\n          <Board\n            id=\"computer\"\n            content={state.enemyBoard}\n            disabled={gameResult.gameOver}\n            onClick={onClick}\n            areBoardCellsHidden={areBoardCellsHidden}\n          />\n        </div>\n        <Usage\n          hide={!buttonNewGameActive || !gameResult.gameOver || isGameStarted}\n        ></Usage>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}